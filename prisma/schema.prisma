// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String            @id @default(cuid())
  cid                      String            @unique
  name                     String
  email                    String            @unique
  ratingId                 Int
  ratingShort              String
  ratingLong               String
  accounts                 Account[]
  sessions                 Session[]
  roles                    Role[]            @relation("UserRole")
  userCertificates         UserCertificate[]
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  permissionsLastUpdatedAt DateTime?

  trainingsAsStudent      Training[]          @relation("StudentTrainings")
  trainingsAsMentor       Training[]          @relation("MentorTrainings")
  trainingSessionAsMentor TrainingSession[]   @relation("MentorSessions")
  assignedTrainings       Training[]          @relation("StaffTrainingAssignments")
}

model Certificate {
  id              String            @id @default(cuid())
  code            String            @unique
  color           String
  name            String
  UserCertificate UserCertificate[]
}

model UserCertificate {
  id            String    @id @default(cuid())
  userId        String
  certificateId String
  isOnTraining  Boolean   @default(false)
  notes         String?
  issuedAt      DateTime  @default(now())
  upgradedAt    DateTime?

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificate Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)

  @@unique([userId, certificateId])
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  color       String?
  users       User[]           @relation("UserRole")
  permissions RolePermission[]
}

model RolePermission {
  id         String     @id @default(cuid())
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  permission Permission
}

enum Permission {
  MANAGE_WEB
  MANAGE_ROSTER
  MANAGE_EVENT
  MANAGE_TRAINING
  READ_TRAINING
  READ_EVENTS
  READ_ROSTER
  ADMINISTRATOR
}

enum TrainingType {
  RATING_PROGRESSION
  SOLO_ENDORSEMENT
  RECURRENT_TRAINING
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resource {
  id          String  @id @default(cuid())
  name        String
  description String
  link        String
  isStaffOnly Boolean
}

model Training {
  id            String        @id @default(cuid())
  type          TrainingType 
  student       User          @relation("StudentTrainings", fields: [studentId], references: [id], onDelete: Cascade)
  studentId     String
  mentor        User?         @relation("MentorTrainings", fields: [mentorId], references: [id], onDelete: SetNull)
  mentorId      String?
  assignedBy    User?         @relation("StaffTrainingAssignments", fields: [assignedById], references: [id], onDelete: SetNull)
  assignedById  String?
  status        String
  notes         String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  ratingDetail  TrainingRatingDetail?
  soloDetail    TrainingSoloDetail?
  sessions      TrainingSession[]

  @@index([studentId])
  @@index([mentorId])
}

model TrainingRatingDetail {
  id             String      @id @default(cuid())
  training       Training    @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  trainingId     String      @unique
  targetRating   String 
}

model TrainingSoloDetail {
  id                String      @id @default(cuid())
  training          Training    @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  trainingId        String      @unique
  position          String
  validUntil        DateTime?
}

model TrainingSession {
  id            String      @id @default(cuid())
  training      Training    @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  trainingId    String
  mentor        User        @relation("MentorSessions", fields: [mentorId], references: [id], onDelete: Cascade)
  mentorId      String
  position      String
  notes         String?     @db.Text
  createdAt     DateTime    @default(now())

  @@index([trainingId])
}
